pipeline {
    agent any

    environment {
        JAVA_HOME = 'C:/Program Files/Java/jdk-23'
        PATH = "${JAVA_HOME}/bin:${PATH}"
        DOCKER_IMAGE = "siapasq/spring-boot-calculator:${BUILD_NUMBER}"
    }

    tools {
        maven 'Maven 3.9.11'
        jdk 'JDK 23'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/lianaa-nana/Spring-Boot-calculator-app.git'
            }
        }

        stage('Build and Test') {
            environment {
                JAVA_HOME = 'C:/Program Files/Java/jdk-23'
                M2_HOME = 'C:/Program Files/apache-maven-3.9.11'
                PATH = "${JAVA_HOME}/bin:${M2_HOME}/bin:${PATH}"
            }
            steps {
                bat 'mvn -version'
                bat 'mvn clean compile'
                bat 'mvn test'
                bat 'mvn package -DskipTests'
            }
            post {
                always {
                    junit 'target/surefire-reports/TEST-*.xml'
                    recordCoverage(
                        tools: [[parser: 'JACOCO', pattern: 'target/site/jacoco/jacoco.xml']],
                        id: 'jacoco',
                        name: 'JaCoCo Coverage',
                        sourceCodeRetention: 'EVERY_BUILD'
                    )
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://localhost:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    bat '''
                        mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar ^
                        -Dsonar.token=%SONAR_AUTH_TOKEN% ^
                        -Dsonar.host.url=%SONAR_URL%
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "siapasq/spring-boot-calculator:${BUILD_NUMBER}"
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        bat """
                            echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% -p ${DOCKER_PASSWORD}
                            docker build -t ${DOCKER_IMAGE} .
                            docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    // Stop old container if exists
                    def stopStatus = bat(script: 'docker stop spring-boot-calculator', returnStatus: true)
                    if (stopStatus != 0) {
                        echo "No running container to stop"
                    }

                    // Remove old container if exists
                    def rmStatus = bat(script: 'docker rm spring-boot-calculator', returnStatus: true)
                    if (rmStatus != 0) {
                        echo "No container to remove"
                    }

                    // Run new container
                    def runStatus = bat(script: 'netstat -ano | findstr :8080', returnStatus: true)
                    if (runStatus == 0) {
                        echo "Port 8080 already in use, using 8081 instead"
                        bat "docker run -d -p 8081:8080 --name spring-boot-calculator ${DOCKER_IMAGE}"
                    } else {
                        bat "docker run -d -p 8080:8080 --name spring-boot-calculator ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Trivy Image Scanning') {
            steps {
                bat "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${DOCKER_IMAGE}"
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Spring-Boot-calculator-app"
                GIT_USER_NAME = "Bhaktabahadurthapa"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    bat '''
                        git config user.email "Bhaktathapamgr5@gmail.com"
                        git config user.name "Bhaktabahadurthapa"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
                        git add deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
